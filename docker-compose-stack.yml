version: '3.9'

services:
  core:
    image: razvantanase/core:1.2.0
    depends_on:
      - io
    deploy:
      replicas: 3
      placement:
        max_replicas_per_node: 1
      update_config:
        order: start-first
      rollback_config:
        order: stop-first
    networks:
      - internal
      - io_core
      - auth_core

  io:
    image: razvantanase/io:1.2.0
    depends_on:
      - db_backend
    deploy:
      replicas: 3
      placement:
        max_replicas_per_node: 1
      update_config:
        order: start-first
      rollback_config:
        order: stop-first
    networks:
      - io_core
      - io_db_backend

  auth:
    image: unityville-bussiness-logic-auth:latest
    depends_on:
      - db_auth
    networks:
      - auth_core
      - auth_db_auth
      - internal
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.entrypoints=web,websecure
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.rule=Path(`/auth`)
      - traefik.http.services.backend.loadbalancer.server.port=8090
      - traefik.http.middlewares.backend.stripprefix.prefixes=/auth

  db_backend:
    image: mysql:8.0.33
    volumes:
      - db_backend:/var/lib/mysql
    user: root
    environment:
      - MYSQL_DATABASE=connectville-app
      - MYSQL_USER=cristi
      - MYSQL_PASSWORD=123
      - MYSQL_ROOT_PASSWORD=root_pwd
    deploy:
      placement:
        constraints:
          - "node.role==manager"
    networks:
      - io_db_backend
      - workbench_db_backend

  adminer:
    image: adminer
    ports:
      - '8081:8080'
    depends_on:
      - db_backend
      - db_auth
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.entrypoints=web,websecure
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.rule=Path(`/adminer`)
      - traefik.http.services.backend.loadbalancer.server.port=8080
    networks:
      - internal
      - workbench_db_auth
      - workbench_db_backend

  db_auth:
    image: mysql:8.0.33
    volumes:
      - db_auth:/var/lib/mysql
    user: root
    environment:
      - MYSQL_DATABASE=auth
      - MYSQL_USER=cristi
      - MYSQL_PASSWORD=123
      - MYSQL_ROOT_PASSWORD=root_pwd
    networks:
      - auth_db_auth
      - workbench_db_auth

#  nginx:
#    image: nginx:latest
#    ports:
#      - "80:80"
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf
#    networks:
#      - internal

  gateway:
    image: traefik:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/:/etc/traefik/:ro
      - ./secrets/:/etc/traefik_certs/:ro
    labels:
      - traefik.enable=true
    networks:
      - internal
    ports:
      - '80:80'
      - '443:443'
      - '8080:8080'

  agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [ node.platform.os == linux ]

  portainer:
    image: portainer/portainer-ce:2.11.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9443:9443"
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [ node.role == manager ]

#  kong:
#    image: kong:latest
#    volumes:
#      - ./Kong:/usr/local/kong/declarative
#    environment:
#      KONG_DATABASE: 'off'
#      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
#      KONG_PROXY_ACCESS_LOG: /dev/stdout
#      KONG_ADMIN_ACCESS_LOG: /dev/stdout
#      KONG_PROXY_ERROR_LOG: /dev/stderr
#      KONG_ADMIN_ERROR_LOG: /dev/stderr
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
#    ports:
#      - "80:8000"
#      - "443:8443"
#      - "8001:8001"
#      - "8444:8444"
#    deploy:
#      placement:
#        constraints: [ node.role == manager ]
#    networks:
#      - internal

volumes:
  db_backend:
  db_auth:
  portainer_data:

networks:
  agent_network:
    driver: overlay
    attachable: true
  internal:
  io_core:
  io_db_backend:
  auth_core:
  auth_db_auth:
  workbench_db_auth:
  workbench_db_backend: